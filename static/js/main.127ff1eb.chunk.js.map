{"version":3,"sources":["redux/user/user.actions.js","config/config.js","components/login-form/login-form.component.jsx","pages/login-page/login-page.component.jsx","pages/errorpage/errorpage.component.jsx","redux/user/user.selector.js","data/plants.data.js","components/profile-sidebar/profile-sidebar.component.jsx","pages/home-page/home-page.component.jsx","components/register-form/register-form.component.jsx","pages/register-page/register-page.component.jsx","App.js","redux/store.js","serviceWorker.js","index.js","redux/user/user.reducer.jsx","redux/root.reducer.js","redux/user/user.types.js"],"names":["setCurrentUser","user","type","UserActionTypes","SET_CURRENT_USER","payload","config","apiUrl","mapboxToken","apiKey","Link","Anchor","LoginFormComponent","props","handleEmailChange","e","setState","email","target","value","handlePasswordChange","password","handleSubmit","reqwest","url","method","data","state","error","err","alert","message","success","resp","history","push","window","location","assign","className","direction","placeholder","prefix","UserOutlined","suffix","title","InfoCircleOutlined","style","color","onChange","event","bordered","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","LockOutlined","block","onClick","href","React","Component","withRouter","connect","dispatch","Title","Typography","LoginPage","classname","padding","ErrorPage","id","selectCurrentUser","createSelector","require","currentUser","plantsData","JSON","stringify","commonName","scientific_name","main_image_url","parse","Search","Input","Panel","Collapse","ProfileSidebar","handleChange","searchKey","handleSearch","query","res","filter","plant","includes","trees","console","log","handleLogout","setTimeout","fetchData","callback","headers","Authorization","tokens","access","token","contentType","handleInfiniteOnLoad","loading","length","warning","hasMore","handleAddTree","tree","latitude","longitude","name","common_name","image_url","user_by","reload","this","icon","size","defaultActiveKey","ghost","header","key","enterButton","width","onSearch","initialLoad","pageStart","loadMore","useWindow","dataSource","renderItem","item","Item","Meta","avatar","src","description","mapStateToProps","createStructuredSelector","accessToken","HomePage","mapRef","createRef","changeOpacity","evt","opacity","changeOpacityToOne","htmlToElement","html","template","document","createElement","trim","innerHTML","content","firstChild","componentDidMount","navigator","geolocation","getCurrentPosition","g","coords","markers","results","H","defaultLayers","service","Platform","createDefaultLayers","map","Map","current","vector","normal","zoom","center","lat","lng","ui","UI","createDefault","addEventListener","getViewPort","resize","mapevents","Behavior","MapEvents","forEach","marker","markerDiv","domIcon","DomIcon","markerDom","DomMarker","draggable","addObject","userMarker","Marker","maps","dispose","ref","RegisterFormComponent","handleNameChange","response","EditOutlined","RegisterPage","App","exact","path","render","to","component","default","createStore","applyMiddleware","store","persistor","persistStore","Boolean","hostname","match","ReactDOM","basename","getElementById","serviceWorker","ready","then","registration","unregister","catch","INITIAL_STATE","userReducer","rootReducer","combineReducers","persistConfig","storage","persistReducer"],"mappings":"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","file":"static/js/main.127ff1eb.chunk.js","sourcesContent":["/** @format */\n\nimport { UserActionTypes } from './user.types';\n\nconst setCurrentUser = (user) => {\n    return {\n        type: UserActionTypes.SET_CURRENT_USER,\n        payload: user,\n    };\n};\n\nexport { setCurrentUser };\n","const config = {\n    apiUrl: 'https://www.eudocia.ml:4055/v1/',\n    mapboxToken: 'pk.eyJ1IjoidmV5eWRhbnQiLCJhIjoiY2tnM253MGlwMGJwejJ3cGpnY2Z4MndoayJ9._yAhXrsBN98XzbyNFj_kHA',\n    apiKey: '6-kP9IcIDxL6hR93eieheN3BuuCm75eG26o_NrGGVZU',\n};\n\nexport default config;\n","import React from 'react';\n\nimport { Input, Tooltip } from 'antd';\nimport { Button, Space } from 'antd';\nimport { InfoCircleOutlined, UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\nimport { setCurrentUser } from '../../redux/user/user.actions';\nimport { connect } from 'react-redux';\nimport reqwest from 'reqwest';\n\nimport './login-form.styles.scss';\nimport config from '../../config/config';\nimport { Anchor } from 'antd';\nimport { withRouter } from 'react-router-dom';\n\nconst { Link } = Anchor;\n\nclass LoginFormComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n        };\n    }\n\n    handleEmailChange = (e) => {\n        this.setState({\n            email: e.target.value,\n        });\n    };\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    };\n\n    handleSubmit = () => {\n        reqwest({\n            url: config.apiUrl + 'auth/login',\n            type: 'json',\n            method: 'post',\n            data: this.state,\n            error: (err) => {\n                alert(err.message);\n            },\n            success: (resp) => {\n                this.props.setCurrentUser(resp);\n                this.props.history.push('/homepage');\n                window.location.assign('/');\n            },\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"login-form\">\n                <Space direction=\"vertical\" className=\"login-form-space\">\n                    <Input\n                        className=\"login-input\"\n                        placeholder=\"Enter your email\"\n                        prefix={<UserOutlined className=\"site-form-item-icon\" />}\n                        suffix={\n                            <Tooltip title=\"Email\">\n                                <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                            </Tooltip>\n                        }\n                        onChange={(event) => {\n                            this.handleEmailChange(event);\n                        }}\n                        bordered={false}\n                    />\n                    <Input.Password\n                        className=\"login-input\"\n                        placeholder=\"input password\"\n                        iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                        prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                        onChange={(event) => {\n                            this.handlePasswordChange(event);\n                        }}\n                    />\n                    <Button\n                        type=\"primary\"\n                        block\n                        onClick={() => {\n                            this.handleSubmit();\n                        }}\n                    >\n                        Login\n                    </Button>\n                    <Anchor>\n                        <Link href=\"/register\" title=\"New User? Register here\" />\n                    </Anchor>\n                </Space>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCurrentUser: (user) => {\n            dispatch(setCurrentUser(user));\n        },\n    };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(LoginFormComponent));\n","import React from 'react';\n\nimport LoginFormComponent from '../../components/login-form/login-form.component';\n\nimport './login-page.styles.scss';\n\nimport { Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst LoginPage = () => (\n    <div classname=\"login-page-div\" style={{ padding: '10vh' }}>\n        <Title className=\"login-page-title\">Tree Map</Title>\n        <LoginFormComponent />\n    </div>\n);\n\nexport default LoginPage;\n","/** @format */\n\nimport React from 'react';\n\nimport './errorpage.styles.css';\n\nconst ErrorPage = () => {\n    return (\n        <div id=\"main\">\n            <div className=\"fof\">\n                <h1>Error 404: Page not found...</h1>\n            </div>\n        </div>\n    );\n};\n\nexport default ErrorPage;\n","/** @format */\n\nconst { createSelector } = require('reselect');\n\nconst selectUser = (state) => state.user;\n\nconst selectCurrentUser = createSelector([selectUser], (user) => user.currentUser);\n\nexport { selectCurrentUser };\n","const plantsData = JSON.stringify([\r\n    {id: 111221, commonName: \"clustered field sedge\", scientific_name: \"Carex praegracilis\", main_image_url: \"http://d2seqvvyy3b8p2.cloudfront.net/ca3ed9f8232591f0c50dd1b9d587bdd0.jpg\"},\r\n    {id: 132177, commonName: \"white ash\", scientific_name: \"Fraxinus americana\", main_image_url: \"https://bs.floristic.org/image/o/ac78a828d9d65c2c27ff47716488f0ceda6b94f0\"},\r\n    {id: 177453, commonName: \"European mountain ash\", scientific_name: \"Sorbus aucuparia\", main_image_url: \"https://bs.floristic.org/image/o/63073d2fbf45b90701279405ecc2eec0272906ed\"},\r\n    {id: 182692, commonName: \"spreading hedgeparsley\", scientific_name: \"Torilis arvensis\", main_image_url: \"https://bs.floristic.org/image/o/a95a92e4a3c02b87f8ecc8c7f6886cc52bec31da\"},\r\n    {id: 238331, commonName: \"aster\", scientific_name: \"Senecio gamolepis\", main_image_url: \"\"},\r\n    {id: 543494, commonName: \"Christmastree\", scientific_name: \"Abies alba\", main_image_url: \"https://bs.floristic.org/image/o/7928c21ee9fdc5ffa423501d3ba54084247cf9a9\"},\r\n    {id: 116854,  scientific_name: \"Carex praegracilis\", commonName: \"clustered field sedge\", main_image_url: \"http://d2seqvvyy3b8p2.cloudfront.net/ca3ed9f8232591f0c50dd1b9d587bdd0.jpg\"},\r\n    {id: 137810,  scientific_name: \"Fraxinus americana\",  commonName: \"white ash\", main_image_url: \"https://bs.floristic.org/image/o/ac78a828d9d65c2c27ff47716488f0ceda6b94f0\"},\r\n    {id: 183086,  scientific_name: \"Sorbus aucuparia\", commonName: \"European mountain ash\", main_image_url: \"https://bs.floristic.org/image/o/63073d2fbf45b90701279405ecc2eec0272906ed\"},\r\n    {id: 188325,  scientific_name: \"Torilis arvensis\", commonName : \"spreading hedgeparsley\", main_image_url: \"https://bs.floristic.org/image/o/a95a92e4a3c02b87f8ecc8c7f6886cc52bec31da\"},\r\n    {id: 188328,  scientific_name: \"Torilis arvensis subsp. purpurea\", commonName: \"spreading hedgeparsley\", main_image_url: \"\"},\r\n    {id: 210279,  scientific_name: \"Torilis arvensis subsp. arvensis\", commonName: \"spreading hedgeparsley\", main_image_url: \"\"},\r\n    {id: 210280,  scientific_name: \"Torilis arvensis subsp. neglecta\", commonName: \"spreading hedgeparsley\", main_image_url: \"\"},\r\n    {id: 273225,  scientific_name: \"Senecio gamolepis\", commonName: \"\", main_image_url: \"\"},\r\n    {id: 328914,  scientific_name: \"Torilis arvensis subsp. turcomanica\", commonName: \"spreading hedgeparsley\", main_image_url: \"\"},\r\n    {id: 328915,  scientific_name: \"Torilis arvensis subsp. recta\", commonName: \"spreading hedgeparsley\", main_image_url: \"\"},\r\n    {id: 1053508, scientific_name: \"Sorbus aucuparia subsp. pohuashanensis\", commonName: \"European mountain ash\", main_image_url: \"\"},\r\n    {id: 1160714, scientific_name: \"Sorbus aucuparia subsp. aucuparia\", commonName: \"European mountain ash\", main_image_url: \"\"},\r\n    {id: 1164147, scientific_name: \"Torilis arvensis subsp. heterophylla\", commonName: \"spreading hedgeparsley\", main_image_url: \"\"},\r\n    {id: 1164724, scientific_name: \"Abies alba\", commonName: \"Christmastree\", main_image_url: \"https://bs.floristic.org/image/o/7928c21ee9fdc5ffa423501d3ba54084247cf9a9\"},\r\n    {id: 1254480, scientific_name: \"Sorbus aucuparia subsp. maderensis\", commonName: \"\", main_image_url: \"\"}\r\n]);\r\n\r\nexport default JSON.parse(plantsData);","import React from 'react';\n\nimport { UserOutlined } from '@ant-design/icons';\nimport { Avatar } from 'antd';\n\nimport './profile-sidebar.styles.scss';\n\nimport { Collapse, Button } from 'antd';\nimport { Input } from 'antd';\nimport { List, message, Spin } from 'antd';\n\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport reqwest from 'reqwest';\nimport config from '../../config/config';\nimport { withRouter } from 'react-router-dom';\nimport { setCurrentUser } from '../../redux/user/user.actions';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport plantsData from '../../data/plants.data';\n\nconst { Search } = Input;\nconst { Panel } = Collapse;\n\nclass ProfileSidebar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchKey: '',\n            trees: [],\n            loading: false,\n            hasMore: true,\n        };\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            searchKey: e.target.value,\n        });\n    };\n\n    handleSearch = (query) => {\n        // this.fetchData((res) => {\n        //     this.setState({\n        //         trees: res.data,\n        //     });\n        // });\n        const { searchKey } = this.state;\n        // console.log(plantsData);\n        const res = plantsData.filter(plant => plant.commonName.includes(searchKey) || plant.scientific_name.includes(searchKey));\n        this.setState({\n            trees: res,\n        });\n\n        console.log(res);\n    };\n\n    handleLogout = () => {\n        this.props.setCurrentUser(null);\n        setTimeout(() => {\n            this.props.history.push('/login');\n            window.location.assign('/');\n        }, 1000);\n        alert('Logout successful!');\n    };\n\n    fetchData = (callback) => {\n        const { user } = this.props;\n        reqwest({\n            url: config.apiUrl + 'trees/search/' + this.state.searchKey,\n            type: 'json',\n            method: 'get',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                Authorization: `Bearer ${user.tokens.access.token}`,\n            },\n            contentType: 'application/json',\n            success: (res) => {\n                callback(res);\n            },\n        });\n    };\n\n    handleInfiniteOnLoad = () => {\n        let { trees } = this.state;\n        this.setState({\n            loading: true,\n        });\n        if (trees.length > 8) {\n            message.warning(\"That's all we could gather :/\");\n            this.setState({\n                hasMore: false,\n                loading: false,\n            });\n            return;\n        }\n        this.setState({\n            loading: false,\n        });\n    };\n\n    handleAddTree = (tree) => {\n        const { commonName, scientific_name, main_image_url } = tree;\n        const { latitude, longitude, user } = this.props;\n\n        const data = {\n            name: commonName,\n            common_name: commonName,\n            scientific_name,\n            image_url: main_image_url,\n            user_by: user.user,\n            latitude,\n            longitude,\n        };\n\n        reqwest({\n            url: config.apiUrl + 'trees',\n            type: 'json',\n            method: 'post',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                Authorization: `Bearer ${user.tokens.access.token}`,\n            },\n            data,\n            error: function (err) {\n                console.log(err);\n            },\n            success: function (resp) {\n                alert('Tree added!');\n                window.location.reload();\n            },\n        });\n    };\n\n    render() {\n        const { trees } = this.state;\n        const { user } = this.props;\n\n        return (\n            <div className=\"profile-sidebar-div\">\n                <div className=\"profile-section\">\n                    <Avatar className=\"profile-avatar\" icon={<UserOutlined />} size={100}></Avatar>\n                    <div className=\"profile-username\">\n                        {user.user.name} <br />\n                    </div>\n                    <div className=\"add-new-tree-form\">\n                        <Collapse defaultActiveKey={['1']} ghost>\n                            <Panel header=\"Add new tree?\" key=\"1\">\n                                <Search\n                                    placeholder=\"Search plants to add\"\n                                    enterButton=\"Search\"\n                                    size=\"large\"\n                                    width=\"15vw\"\n                                    value={this.state.searchKey}\n                                    onChange={(event) => this.handleChange(event)}\n                                    onSearch={(value) => this.handleSearch(value)}\n                                />\n                                <div className=\"search-results\">\n                                    <div className=\"demo-infinite-container\">\n                                        <InfiniteScroll\n                                            initialLoad={false}\n                                            pageStart={0}\n                                            loadMore={this.handleInfiniteOnLoad}\n                                            hasMore={!this.state.loading && this.state.hasMore}\n                                            useWindow={false}\n                                        >\n                                            <List\n                                                dataSource={trees}\n                                                renderItem={(item) => (\n                                                    <List.Item key={item.id}>\n                                                        <List.Item.Meta\n                                                            avatar={<Avatar src={item.main_image_url} />}\n                                                            title={item.commonName}\n                                                            description={\n                                                                <span>Scientific Name: {item.scientific_name}</span>\n                                                            }\n                                                        />\n                                                        <div>\n                                                            <Button\n                                                                type=\"primary\"\n                                                                block\n                                                                onClick={() => {\n                                                                    this.handleAddTree(item);\n                                                                }}\n                                                            >\n                                                                Add\n                                                            </Button>\n                                                        </div>\n                                                    </List.Item>\n                                                )}\n                                            >\n                                                {this.state.loading && this.state.hasMore && (\n                                                    <div className=\"demo-loading-container\">\n                                                        <Spin />\n                                                    </div>\n                                                )}\n                                            </List>\n                                        </InfiniteScroll>\n                                    </div>\n                                </div>\n                            </Panel>\n                        </Collapse>\n                    </div>\n                    <div className=\"logout-section\">\n                        <Button\n                            block\n                            onClick={() => {\n                                this.handleLogout();\n                            }}\n                        >\n                            Logout\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCurrentUser: (user) => {\n            dispatch(setCurrentUser(user));\n        },\n    };\n};\n\nconst mapStateToProps = createStructuredSelector({\n    user: selectCurrentUser,\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ProfileSidebar));\n","import React from 'react';\n\nimport './home-page.styles.scss';\nimport ProfileSidebar from '../../components/profile-sidebar/profile-sidebar.component';\nimport config from '../../config/config';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport reqwest from 'reqwest';\n\nconst mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\nmapboxgl.accessToken = config.mapboxToken;\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            maps: null,\n            latitude: null,\n            longitude: null,\n            markers: [],\n            map: null,\n        };\n    }\n\n    fetchData = (callback) => {\n        const { user } = this.props;\n        reqwest({\n            url: config.apiUrl + 'trees',\n            type: 'json',\n            method: 'get',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                Authorization: `Bearer ${user.tokens.access.token}`,\n            },\n            contentType: 'application/json',\n            success: (res) => {\n                callback(res);\n            },\n        });\n    };\n\n    mapRef = React.createRef();\n\n    changeOpacity = (evt) => {\n        evt.target.style.opacity = 0.6;\n    };\n    \n    changeOpacityToOne = (evt) => {\n        evt.target.style.opacity = 1;\n    };\n\n    htmlToElement = (html) => {\n        var template = document.createElement('template');\n        html = html.trim(); // Never return a text node of whitespace as the result\n        template.innerHTML = html;\n        return template.content.firstChild;\n    }\n\n    componentDidMount = () => {\n        this.fetchData((res) => {\n            navigator.geolocation.getCurrentPosition((g) => {\n                const { latitude, longitude } = g.coords;            \n            \n                this.setState(\n                    {\n                        markers: res.results,\n                    },\n                    () => {\n                        console.log(this.state.markers);\n                        // const markersArray = [];\n\n                        const H = window.H;\n    \n                        const platform = new H.service.Platform({\n                            'apikey': '6-kP9IcIDxL6hR93eieheN3BuuCm75eG26o_NrGGVZU',\n                        });\n    \n    \n                        // Obtain the default map types from the platform object:\n                        const defaultLayers = platform.createDefaultLayers();\n    \n                        // Instantiate (and display) a map object:\n                        const map = new H.Map(\n                            this.mapRef.current,\n                            defaultLayers.vector.normal.map,\n                            {\n                            zoom: 10,\n                            center: { lat: latitude, lng: longitude }\n                        });\n    \n                        // eslint-disable-next-line\n                        const ui = H.ui.UI.createDefault(map, defaultLayers);\n    \n                        window.addEventListener('resize', () => map.getViewPort().resize());\n    \n                        //Step 3: make the map interactive\n                        // MapEvents enables the event system\n                        // Behavior implements default interactions for pan/zoom (also on mobile touch environments)\n                        // eslint-disable-next-line\n                        const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));\n    \n                        this.state.markers.forEach(marker => {\n                            const markerDiv = \n                            // <img src=${marker.image_url} style=\"max-width: '20px'\" />\n                                this.htmlToElement(`<div class=\"marker-element\">\n                                    <strong>${marker.name}</strong>\n                                    <p>\n                                        Put up by: ${marker.user_by.name} <br />\n                                        Latitude: ${marker.latitude} <br />\n                                        Longitude: ${marker.longitude} <br />\n                                    </p>\n                                </div>`);\n                            // );\n                            let domIcon = new H.map.DomIcon(markerDiv);\n                            \n                              // Marker for Chicago Bears home\n                              let markerDom = new H.map.DomMarker({lat: marker.latitude, lng: marker.longitude}, {\n                                icon: domIcon\n                              });\n                              markerDom.draggable = true;\n                              map.addObject(markerDom);\n                        });\n\n                        var userMarker = new H.map.Marker({lat: latitude, lng: longitude});\n                        map.addObject(userMarker);\n\n                        this.setState({ \n                            map,\n                            latitude,\n                            longitude, \n                        });\n                    }\n                );\n            });\n        });\n    };\n\n    componentWillUnmount() {\n        // Cleanup after the map to avoid memory leaks when this component exits the page\n        if (this.state.map) {\n            this.state.map.dispose();\n        }\n    }\n\n    render() {\n        const { latitude, longitude } = this.state;\n\n        return (\n            <div className=\"home-page-div\">\n                <ProfileSidebar latitude={latitude} longitude={longitude} />\n                <div ref={this.mapRef} className=\"mapContainer\" ></div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    user: selectCurrentUser,\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import React from 'react';\n\nimport { Input, Tooltip } from 'antd';\nimport { Button, Space } from 'antd';\nimport { InfoCircleOutlined, UserOutlined, LockOutlined, EditOutlined } from '@ant-design/icons';\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\nimport { setCurrentUser } from '../../redux/user/user.actions';\nimport { connect } from 'react-redux';\nimport reqwest from 'reqwest';\n\nimport './register-form.styles.scss';\nimport config from '../../config/config';\nimport { Anchor } from 'antd';\nimport { withRouter } from 'react-router-dom';\n\nconst { Link } = Anchor;\n\nclass RegisterFormComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        };\n    }\n\n    handleNameChange = (e) => {\n        this.setState({\n            name: e.target.value,\n        });\n    };\n\n    handleEmailChange = (e) => {\n        this.setState({\n            email: e.target.value,\n        });\n    };\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    };\n\n    handleSubmit = () => {\n        reqwest({\n            url: config.apiUrl + 'auth/register',\n            type: 'json',\n            method: 'post',\n            data: this.state,\n            error: (err) => {\n                alert(JSON.parse(err.response).message);\n            },\n            success: (resp) => {\n                this.props.setCurrentUser(resp);\n                this.props.history.push('/homepage');\n                window.location.assign('/');\n            },\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"register-form\">\n                <Space direction=\"vertical\" className=\"register-form-space\">\n                    <Input\n                        className=\"register-input\"\n                        placeholder=\"Enter your name\"\n                        prefix={<EditOutlined className=\"site-form-item-icon\" />}\n                        suffix={\n                            <Tooltip title=\"Name\">\n                                <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                            </Tooltip>\n                        }\n                        onChange={(event) => {\n                            this.handleNameChange(event);\n                        }}\n                        bordered={false}\n                    />\n                    <Input\n                        className=\"register-input\"\n                        placeholder=\"Enter your email\"\n                        prefix={<UserOutlined className=\"site-form-item-icon\" />}\n                        suffix={\n                            <Tooltip title=\"Email\">\n                                <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                            </Tooltip>\n                        }\n                        onChange={(event) => {\n                            this.handleEmailChange(event);\n                        }}\n                        bordered={false}\n                    />\n                    <Input.Password\n                        className=\"register-input\"\n                        placeholder=\"input password\"\n                        iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                        prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                        onChange={(event) => {\n                            this.handlePasswordChange(event);\n                        }}\n                    />\n                    <Button\n                        type=\"primary\"\n                        block\n                        onClick={() => {\n                            this.handleSubmit();\n                        }}\n                    >\n                        Register\n                    </Button>\n                    <Anchor>\n                        <Link href=\"/login\" title=\"Already Registered? Login here\" />\n                    </Anchor>\n                </Space>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCurrentUser: (user) => {\n            dispatch(setCurrentUser(user));\n        },\n    };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(RegisterFormComponent));\n","import React from 'react';\n\nimport './register-page.styles.scss';\n\nimport { Typography } from 'antd';\nimport RegisterFormComponent from '../../components/register-form/register-form.component';\n\nconst { Title } = Typography;\n\nconst RegisterPage = () => (\n    <div classname=\"register-page-div\" style={{ padding: '10vh' }}>\n        <Title className=\"register-page-title\">Tree Map</Title>\n        <RegisterFormComponent />\n    </div>\n);\n\nexport default RegisterPage;\n","import React from 'react';\nimport './App.css';\n// import { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport LoginPage from './pages/login-page/login-page.component';\nimport ErrorPage from './pages/errorpage/errorpage.component';\nimport HomePage from './pages/home-page/home-page.component';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from './redux/user/user.selector';\nimport { connect } from 'react-redux';\nimport RegisterPage from './pages/register-page/register-page.component';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            // eslint-disable-next-line\n            user: this.props.user,\n        });\n    }\n\n    render() {\n        return (\n            <Switch>\n                <Route\n                    exact\n                    path=\"/\"\n                    render={() =>\n                        this.state.user ? <Redirect to=\"/homepage\"></Redirect> : <Redirect to=\"/login\"></Redirect>\n                    }\n                ></Route>\n                <Route\n                    exact\n                    path=\"/homepage\"\n                    render={() => (this.state.user ? <HomePage /> : <Redirect to=\"/login\"></Redirect>)}\n                ></Route>\n                <Route\n                    exact\n                    path=\"/login\"\n                    render={() => (this.state.user ? <Redirect to=\"/\"></Redirect> : <LoginPage />)}\n                ></Route>\n                <Route\n                    exact\n                    path=\"/register\"\n                    render={() => (this.state.user ? <Redirect to=\"/\"></Redirect> : <RegisterPage />)}\n                ></Route>\n                <Route path=\"*\" component={ErrorPage}></Route>\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    user: selectCurrentUser,\n});\n\nexport default connect(mapStateToProps)(App);\n","/** @format */\n\nimport { persistStore } from 'redux-persist';\n\nconst { default: logger } = require('redux-logger');\nconst { createStore, applyMiddleware } = require('redux');\nconst { default: rootReducer } = require('./root.reducer');\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        {/* <React.StrictMode> */}\n            <HashRouter basename='/'>\n                <PersistGate persistor={persistor}>\n                    <App />\n                </PersistGate>\n            </HashRouter>\n        {/* </React.StrictMode> */}\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/** @format */\n\nimport { UserActionTypes } from './user.types';\n\nconst INITIAL_STATE = {\n    currentUser: null,\n};\n\nconst userReducer = (state = INITIAL_STATE, { type, payload }) => {\n    switch (type) {\n        case UserActionTypes.SET_CURRENT_USER:\n            return {\n                ...state,\n                currentUser: payload,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;\n","/** @format */\n\nimport { combineReducers } from 'redux';\n\nimport userReducer from './user/user.reducer';\n\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\n\nconst rootReducer = combineReducers({\n    user: userReducer,\n});\n\nconst persistConfig = {\n    key: 'treemap',\n    storage: storage,\n};\n\nexport default persistReducer(persistConfig, rootReducer);\n","/** @format */\n\nexport const UserActionTypes = {\n    SET_CURRENT_USER: 'SET_CURRENT_USER',\n};\n"],"sourceRoot":""}